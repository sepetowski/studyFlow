generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  surname             String?
  username            String         @unique
  email               String?        @unique
  emailVerified       DateTime?
  hashedPassword      String?
  image               String?
  completedOnboarding Boolean        @default(false)
  accounts            Account[]
  sessions            Session[]
  useCase             UseCase?
  createdWorkspaces   Workspace[]    @relation("CreatedBy")
  subscriptions       Subscription[]
}

model Workspace {
  id           String             @id @default(cuid())
  name         String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  creatorId    String?
  Creator      User?              @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  subscribers  Subscription[]
  image        String?
  color        WorkspaceIconColor @default(GREEN)
  inviteCode   String             @unique
  adminCode    String             @unique
  canEditCode  String             @unique
  readOnlyCode String             @unique

  @@index([creatorId])
}

model Subscription {
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  userRole    UserPermison @default(READ_ONLY)

  @@id([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum WorkspaceIconColor {
  PURPLE
  RED
  GREEN
  BLUE
  PINK
  YELLOW
  ORANGE
  CYAN
  FUCHSIA
  LIME
  EMERALD
  INDIGO
}

enum UseCase {
  WORK
  STUDY
  PERSONAL_USE
}

enum UserPermison {
  ADMIN
  CAN_EDIT
  READ_ONLY
  OWNER
}
